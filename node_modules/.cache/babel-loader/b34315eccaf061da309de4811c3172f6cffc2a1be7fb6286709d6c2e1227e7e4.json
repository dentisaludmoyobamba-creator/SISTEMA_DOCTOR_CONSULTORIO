{"ast":null,"code":"// Servicio para gestión de usuarios (CRUD)\nconst API_URL = 'https://usuarios-1090334808863.us-central1.run.app';\nclass UsersService {\n  constructor() {\n    this.authService = null;\n  }\n\n  // Inyectar authService para obtener token\n  setAuthService(authService) {\n    this.authService = authService;\n  }\n\n  // Headers base para las peticiones\n  getHeaders(includeAuth = true) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (includeAuth && this.authService) {\n      const token = this.authService.getToken();\n      console.log('Token obtenido:', token);\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n        console.log('Authorization header:', headers['Authorization']);\n      } else {\n        console.log('No se encontró token');\n      }\n    } else {\n      console.log('AuthService no disponible o includeAuth es false');\n    }\n    return headers;\n  }\n\n  // Obtener lista de usuarios\n  async getUsers(page = 1, limit = 10, search = '', role = '') {\n    try {\n      const params = new URLSearchParams({\n        action: 'users',\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      if (search) params.append('search', search);\n      if (role) params.append('role', role);\n      const headers = this.getHeaders();\n      console.log('Headers enviados:', headers);\n      console.log('URL completa:', `${API_URL}?${params}`);\n      const response = await fetch(`${API_URL}?${params}`, {\n        method: 'GET',\n        headers: headers\n      });\n      console.log('Response status:', response.status);\n      console.log('Response headers:', response.headers);\n      const data = await response.json();\n      console.log('Response data:', data);\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          users: data.users,\n          pagination: data.pagination\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al obtener usuarios'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener usuarios:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + error.message\n      };\n    }\n  }\n\n  // Crear nuevo usuario\n  async createUser(userData) {\n    try {\n      const response = await fetch(`${API_URL}?action=create_user`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          message: data.message,\n          user_id: data.user_id\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al crear usuario'\n        };\n      }\n    } catch (error) {\n      console.error('Error al crear usuario:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Actualizar usuario\n  async updateUser(userId, userData) {\n    try {\n      const response = await fetch(`${API_URL}?action=update_user&user_id=${userId}`, {\n        method: 'PUT',\n        headers: this.getHeaders(),\n        body: JSON.stringify(userData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al actualizar usuario'\n        };\n      }\n    } catch (error) {\n      console.error('Error al actualizar usuario:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Eliminar (desactivar) usuario\n  async deleteUser(userId) {\n    try {\n      const response = await fetch(`${API_URL}?action=delete_user&user_id=${userId}`, {\n        method: 'DELETE',\n        headers: this.getHeaders()\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al eliminar usuario'\n        };\n      }\n    } catch (error) {\n      console.error('Error al eliminar usuario:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Obtener roles disponibles\n  async getRoles() {\n    try {\n      const response = await fetch(`${API_URL}?action=roles`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          roles: data.roles\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al obtener roles'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener roles:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Cambiar estado de usuario (activar/desactivar)\n  async toggleUserStatus(userId, active) {\n    try {\n      return await this.updateUser(userId, {\n        active\n      });\n    } catch (error) {\n      console.error('Error al cambiar estado de usuario:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Validar datos de usuario\n  validateUserData(userData, isUpdate = false) {\n    const errors = [];\n    if (!isUpdate || userData.username) {\n      if (!userData.username || userData.username.trim().length < 3) {\n        errors.push('El nombre de usuario debe tener al menos 3 caracteres');\n      }\n    }\n    if (!isUpdate || userData.email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!userData.email || !emailRegex.test(userData.email)) {\n        errors.push('Email inválido');\n      }\n    }\n    if (!isUpdate || userData.password) {\n      if (!isUpdate && (!userData.password || userData.password.length < 6)) {\n        errors.push('La contraseña debe tener al menos 6 caracteres');\n      } else if (isUpdate && userData.password && userData.password.length < 6) {\n        errors.push('La contraseña debe tener al menos 6 caracteres');\n      }\n    }\n    if (!isUpdate && (!userData.role_id || !Number.isInteger(userData.role_id))) {\n      errors.push('Debe seleccionar un rol válido');\n    }\n\n    // Validaciones específicas para doctores\n    if (userData.doctor_info) {\n      const doctorInfo = userData.doctor_info;\n      if (!doctorInfo.nombres || doctorInfo.nombres.trim().length < 2) {\n        errors.push('Los nombres del doctor deben tener al menos 2 caracteres');\n      }\n      if (!doctorInfo.apellidos || doctorInfo.apellidos.trim().length < 2) {\n        errors.push('Los apellidos del doctor deben tener al menos 2 caracteres');\n      }\n      if (!doctorInfo.dni || doctorInfo.dni.trim().length < 8) {\n        errors.push('El DNI del doctor debe tener al menos 8 caracteres');\n      }\n      if (!doctorInfo.colegiatura || doctorInfo.colegiatura.trim().length < 3) {\n        errors.push('La colegiatura del doctor debe tener al menos 3 caracteres');\n      }\n    }\n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  // Formatear usuario para mostrar\n  formatUserForDisplay(user) {\n    return {\n      id: user.id,\n      displayName: user.is_doctor && user.doctor_info ? `${user.doctor_info.nombres} ${user.doctor_info.apellidos}` : user.username,\n      username: user.username,\n      email: user.email,\n      role: user.role,\n      roleDescription: user.role_description,\n      active: user.active,\n      lastLogin: user.last_login ? new Date(user.last_login).toLocaleString('es-ES') : 'Nunca',\n      createdAt: user.created_at ? new Date(user.created_at).toLocaleDateString('es-ES') : '',\n      isDoctor: user.is_doctor,\n      doctorInfo: user.doctor_info\n    };\n  }\n\n  // Preparar datos para crear usuario\n  prepareUserDataForCreation(formData, selectedRole) {\n    const userData = {\n      username: formData.username.trim(),\n      email: formData.email.trim(),\n      password: formData.password,\n      role_id: selectedRole.id\n    };\n\n    // Si es doctor, agregar información del doctor\n    if (selectedRole.name === 'Doctor' && formData.doctorInfo) {\n      var _formData$doctorInfo$;\n      userData.doctor_info = {\n        nombres: formData.doctorInfo.nombres.trim(),\n        apellidos: formData.doctorInfo.apellidos.trim(),\n        dni: formData.doctorInfo.dni.trim(),\n        colegiatura: formData.doctorInfo.colegiatura.trim(),\n        telefono: ((_formData$doctorInfo$ = formData.doctorInfo.telefono) === null || _formData$doctorInfo$ === void 0 ? void 0 : _formData$doctorInfo$.trim()) || ''\n      };\n    }\n    return userData;\n  }\n}\n\n// Exportar una instancia única del servicio\nconst usersService = new UsersService();\nexport default usersService;","map":{"version":3,"names":["API_URL","UsersService","constructor","authService","setAuthService","getHeaders","includeAuth","headers","token","getToken","console","log","getUsers","page","limit","search","role","params","URLSearchParams","action","toString","append","response","fetch","method","status","data","json","ok","success","users","pagination","error","message","createUser","userData","body","JSON","stringify","user_id","updateUser","userId","deleteUser","getRoles","roles","toggleUserStatus","active","validateUserData","isUpdate","errors","username","trim","length","push","email","emailRegex","test","password","role_id","Number","isInteger","doctor_info","doctorInfo","nombres","apellidos","dni","colegiatura","isValid","formatUserForDisplay","user","id","displayName","is_doctor","roleDescription","role_description","lastLogin","last_login","Date","toLocaleString","createdAt","created_at","toLocaleDateString","isDoctor","prepareUserDataForCreation","formData","selectedRole","name","_formData$doctorInfo$","telefono","usersService"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/usersService.js"],"sourcesContent":["// Servicio para gestión de usuarios (CRUD)\r\nconst API_URL = 'https://usuarios-1090334808863.us-central1.run.app';\r\n\r\nclass UsersService {\r\n  constructor() {\r\n    this.authService = null;\r\n  }\r\n\r\n  // Inyectar authService para obtener token\r\n  setAuthService(authService) {\r\n    this.authService = authService;\r\n  }\r\n\r\n  // Headers base para las peticiones\r\n  getHeaders(includeAuth = true) {\r\n    const headers = {\r\n      'Content-Type': 'application/json'\r\n    };\r\n\r\n    if (includeAuth && this.authService) {\r\n      const token = this.authService.getToken();\r\n      console.log('Token obtenido:', token);\r\n      if (token) {\r\n        headers['Authorization'] = `Bearer ${token}`;\r\n        console.log('Authorization header:', headers['Authorization']);\r\n      } else {\r\n        console.log('No se encontró token');\r\n      }\r\n    } else {\r\n      console.log('AuthService no disponible o includeAuth es false');\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  // Obtener lista de usuarios\r\n  async getUsers(page = 1, limit = 10, search = '', role = '') {\r\n    try {\r\n      const params = new URLSearchParams({\r\n        action: 'users',\r\n        page: page.toString(),\r\n        limit: limit.toString()\r\n      });\r\n\r\n      if (search) params.append('search', search);\r\n      if (role) params.append('role', role);\r\n\r\n      const headers = this.getHeaders();\r\n      console.log('Headers enviados:', headers);\r\n      console.log('URL completa:', `${API_URL}?${params}`);\r\n\r\n      const response = await fetch(`${API_URL}?${params}`, {\r\n        method: 'GET',\r\n        headers: headers\r\n      });\r\n\r\n      console.log('Response status:', response.status);\r\n      console.log('Response headers:', response.headers);\r\n\r\n      const data = await response.json();\r\n      console.log('Response data:', data);\r\n\r\n      if (response.ok && data.success) {\r\n        return {\r\n          success: true,\r\n          users: data.users,\r\n          pagination: data.pagination\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: data.error || 'Error al obtener usuarios'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener usuarios:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Error de conexión con el servidor: ' + error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  // Crear nuevo usuario\r\n  async createUser(userData) {\r\n    try {\r\n      const response = await fetch(`${API_URL}?action=create_user`, {\r\n        method: 'POST',\r\n        headers: this.getHeaders(),\r\n        body: JSON.stringify(userData)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok && data.success) {\r\n        return {\r\n          success: true,\r\n          message: data.message,\r\n          user_id: data.user_id\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: data.error || 'Error al crear usuario'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al crear usuario:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Error de conexión con el servidor'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Actualizar usuario\r\n  async updateUser(userId, userData) {\r\n    try {\r\n      const response = await fetch(`${API_URL}?action=update_user&user_id=${userId}`, {\r\n        method: 'PUT',\r\n        headers: this.getHeaders(),\r\n        body: JSON.stringify(userData)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok && data.success) {\r\n        return {\r\n          success: true,\r\n          message: data.message\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: data.error || 'Error al actualizar usuario'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al actualizar usuario:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Error de conexión con el servidor'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Eliminar (desactivar) usuario\r\n  async deleteUser(userId) {\r\n    try {\r\n      const response = await fetch(`${API_URL}?action=delete_user&user_id=${userId}`, {\r\n        method: 'DELETE',\r\n        headers: this.getHeaders()\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok && data.success) {\r\n        return {\r\n          success: true,\r\n          message: data.message\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: data.error || 'Error al eliminar usuario'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al eliminar usuario:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Error de conexión con el servidor'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Obtener roles disponibles\r\n  async getRoles() {\r\n    try {\r\n      const response = await fetch(`${API_URL}?action=roles`, {\r\n        method: 'GET',\r\n        headers: this.getHeaders()\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (response.ok && data.success) {\r\n        return {\r\n          success: true,\r\n          roles: data.roles\r\n        };\r\n      } else {\r\n        return {\r\n          success: false,\r\n          error: data.error || 'Error al obtener roles'\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error al obtener roles:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Error de conexión con el servidor'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Cambiar estado de usuario (activar/desactivar)\r\n  async toggleUserStatus(userId, active) {\r\n    try {\r\n      return await this.updateUser(userId, { active });\r\n    } catch (error) {\r\n      console.error('Error al cambiar estado de usuario:', error);\r\n      return {\r\n        success: false,\r\n        error: 'Error de conexión con el servidor'\r\n      };\r\n    }\r\n  }\r\n\r\n  // Validar datos de usuario\r\n  validateUserData(userData, isUpdate = false) {\r\n    const errors = [];\r\n\r\n    if (!isUpdate || userData.username) {\r\n      if (!userData.username || userData.username.trim().length < 3) {\r\n        errors.push('El nombre de usuario debe tener al menos 3 caracteres');\r\n      }\r\n    }\r\n\r\n    if (!isUpdate || userData.email) {\r\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      if (!userData.email || !emailRegex.test(userData.email)) {\r\n        errors.push('Email inválido');\r\n      }\r\n    }\r\n\r\n    if (!isUpdate || userData.password) {\r\n      if (!isUpdate && (!userData.password || userData.password.length < 6)) {\r\n        errors.push('La contraseña debe tener al menos 6 caracteres');\r\n      } else if (isUpdate && userData.password && userData.password.length < 6) {\r\n        errors.push('La contraseña debe tener al menos 6 caracteres');\r\n      }\r\n    }\r\n\r\n    if (!isUpdate && (!userData.role_id || !Number.isInteger(userData.role_id))) {\r\n      errors.push('Debe seleccionar un rol válido');\r\n    }\r\n\r\n    // Validaciones específicas para doctores\r\n    if (userData.doctor_info) {\r\n      const doctorInfo = userData.doctor_info;\r\n      \r\n      if (!doctorInfo.nombres || doctorInfo.nombres.trim().length < 2) {\r\n        errors.push('Los nombres del doctor deben tener al menos 2 caracteres');\r\n      }\r\n      \r\n      if (!doctorInfo.apellidos || doctorInfo.apellidos.trim().length < 2) {\r\n        errors.push('Los apellidos del doctor deben tener al menos 2 caracteres');\r\n      }\r\n      \r\n      if (!doctorInfo.dni || doctorInfo.dni.trim().length < 8) {\r\n        errors.push('El DNI del doctor debe tener al menos 8 caracteres');\r\n      }\r\n      \r\n      if (!doctorInfo.colegiatura || doctorInfo.colegiatura.trim().length < 3) {\r\n        errors.push('La colegiatura del doctor debe tener al menos 3 caracteres');\r\n      }\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors\r\n    };\r\n  }\r\n\r\n  // Formatear usuario para mostrar\r\n  formatUserForDisplay(user) {\r\n    return {\r\n      id: user.id,\r\n      displayName: user.is_doctor && user.doctor_info ? \r\n        `${user.doctor_info.nombres} ${user.doctor_info.apellidos}` : \r\n        user.username,\r\n      username: user.username,\r\n      email: user.email,\r\n      role: user.role,\r\n      roleDescription: user.role_description,\r\n      active: user.active,\r\n      lastLogin: user.last_login ? new Date(user.last_login).toLocaleString('es-ES') : 'Nunca',\r\n      createdAt: user.created_at ? new Date(user.created_at).toLocaleDateString('es-ES') : '',\r\n      isDoctor: user.is_doctor,\r\n      doctorInfo: user.doctor_info\r\n    };\r\n  }\r\n\r\n  // Preparar datos para crear usuario\r\n  prepareUserDataForCreation(formData, selectedRole) {\r\n    const userData = {\r\n      username: formData.username.trim(),\r\n      email: formData.email.trim(),\r\n      password: formData.password,\r\n      role_id: selectedRole.id\r\n    };\r\n\r\n    // Si es doctor, agregar información del doctor\r\n    if (selectedRole.name === 'Doctor' && formData.doctorInfo) {\r\n      userData.doctor_info = {\r\n        nombres: formData.doctorInfo.nombres.trim(),\r\n        apellidos: formData.doctorInfo.apellidos.trim(),\r\n        dni: formData.doctorInfo.dni.trim(),\r\n        colegiatura: formData.doctorInfo.colegiatura.trim(),\r\n        telefono: formData.doctorInfo.telefono?.trim() || ''\r\n      };\r\n    }\r\n\r\n    return userData;\r\n  }\r\n}\r\n\r\n// Exportar una instancia única del servicio\r\nconst usersService = new UsersService();\r\nexport default usersService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}