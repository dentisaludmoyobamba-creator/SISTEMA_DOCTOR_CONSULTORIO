{"ast":null,"code":"// Servicio para gestión de pacientes (listar, crear)\nconst API_URL = 'https://pacientes-1090334808863.us-central1.run.app';\nclass PatientsService {\n  constructor() {\n    this.authService = null;\n  }\n  setAuthService(authService) {\n    this.authService = authService;\n  }\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.authService) {\n      var _this$authService$get, _this$authService;\n      const token = ((_this$authService$get = (_this$authService = this.authService).getToken) === null || _this$authService$get === void 0 ? void 0 : _this$authService$get.call(_this$authService)) || null;\n      if (token) headers['Authorization'] = `Bearer ${token}`;\n    }\n    return headers;\n  }\n  async list({\n    page = 1,\n    limit = 20,\n    search = ''\n  } = {}) {\n    try {\n      const params = new URLSearchParams({\n        action: 'patients',\n        page: String(page),\n        limit: String(limit)\n      });\n      if (search) params.append('search', search);\n      const res = await fetch(`${API_URL.replace('usuarios', 'pacientes')}?${params.toString()}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      const data = await res.json();\n      if (res.ok && data.success) {\n        return {\n          success: true,\n          patients: data.patients,\n          pagination: data.pagination\n        };\n      }\n      return {\n        success: false,\n        error: data.error || 'Error al listar pacientes'\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + e.message\n      };\n    }\n  }\n  async create(payload) {\n    try {\n      const params = new URLSearchParams({\n        action: 'create'\n      });\n      const res = await fetch(`${API_URL.replace('usuarios', 'pacientes')}?${params.toString()}`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify(payload)\n      });\n      const data = await res.json();\n      if (res.ok && data.success) {\n        return {\n          success: true,\n          message: data.message,\n          patient_id: data.patient_id\n        };\n      }\n      return {\n        success: false,\n        error: data.error || 'Error al crear paciente'\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + e.message\n      };\n    }\n  }\n}\nconst patientsService = new PatientsService();\nexport default patientsService;","map":{"version":3,"names":["API_URL","PatientsService","constructor","authService","setAuthService","getHeaders","headers","_this$authService$get","_this$authService","token","getToken","call","list","page","limit","search","params","URLSearchParams","action","String","append","res","fetch","replace","toString","method","data","json","ok","success","patients","pagination","error","e","message","create","payload","body","JSON","stringify","patient_id","patientsService"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/patientsService.js"],"sourcesContent":["// Servicio para gestión de pacientes (listar, crear)\r\nconst API_URL = 'https://pacientes-1090334808863.us-central1.run.app';\r\n\r\nclass PatientsService {\r\n  constructor() {\r\n    this.authService = null;\r\n  }\r\n\r\n  setAuthService(authService) {\r\n    this.authService = authService;\r\n  }\r\n\r\n  getHeaders() {\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    if (this.authService) {\r\n      const token = this.authService.getToken?.() || null;\r\n      if (token) headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  async list({ page = 1, limit = 20, search = '' } = {}) {\r\n    try {\r\n      const params = new URLSearchParams({ action: 'patients', page: String(page), limit: String(limit) });\r\n      if (search) params.append('search', search);\r\n\r\n      const res = await fetch(`${API_URL.replace('usuarios', 'pacientes')}?${params.toString()}`, {\r\n        method: 'GET',\r\n        headers: this.getHeaders()\r\n      });\r\n      const data = await res.json();\r\n      if (res.ok && data.success) {\r\n        return { success: true, patients: data.patients, pagination: data.pagination };\r\n      }\r\n      return { success: false, error: data.error || 'Error al listar pacientes' };\r\n    } catch (e) {\r\n      return { success: false, error: 'Error de conexión con el servidor: ' + e.message };\r\n    }\r\n  }\r\n\r\n  async create(payload) {\r\n    try {\r\n      const params = new URLSearchParams({ action: 'create' });\r\n      const res = await fetch(`${API_URL.replace('usuarios', 'pacientes')}?${params.toString()}`, {\r\n        method: 'POST',\r\n        headers: this.getHeaders(),\r\n        body: JSON.stringify(payload)\r\n      });\r\n      const data = await res.json();\r\n      if (res.ok && data.success) {\r\n        return { success: true, message: data.message, patient_id: data.patient_id };\r\n      }\r\n      return { success: false, error: data.error || 'Error al crear paciente' };\r\n    } catch (e) {\r\n      return { success: false, error: 'Error de conexión con el servidor: ' + e.message };\r\n    }\r\n  }\r\n}\r\n\r\nconst patientsService = new PatientsService();\r\nexport default patientsService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}