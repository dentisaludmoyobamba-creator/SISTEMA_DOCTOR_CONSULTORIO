{"ast":null,"code":"// Servicio para gestión de inventario (productos, compras, consumo)\nconst API_URL = 'https://inventario-1090334808863.us-central1.run.app'; // Reemplazar con la URL real de tu Cloud Function de Inventario\n\nclass InventarioService {\n  constructor() {\n    this.authService = null;\n  }\n  setAuthService(authService) {\n    this.authService = authService;\n  }\n  getHeaders(includeAuth = true) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (includeAuth && this.authService) {\n      const token = this.authService.getToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    return headers;\n  }\n\n  // ===== PRODUCTOS =====\n  async getProductos(filters = {}) {\n    try {\n      const params = new URLSearchParams({\n        section: 'productos',\n        page: filters.page || 1,\n        limit: filters.limit || 20\n      });\n      if (filters.search) params.append('search', filters.search);\n      if (filters.tipo) params.append('tipo', filters.tipo);\n      if (filters.categoria) params.append('categoria', filters.categoria);\n      if (filters.almacen) params.append('almacen', filters.almacen);\n      if (filters.alerta_stock) params.append('alerta_stock', filters.alerta_stock);\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: headers\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          productos: data.productos,\n          pagination: data.pagination\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al obtener productos'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener productos:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + error.message\n      };\n    }\n  }\n  async createProducto(productoData) {\n    try {\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?section=productos`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(productoData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          producto: data.producto\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al crear producto'\n        };\n      }\n    } catch (error) {\n      console.error('Error al crear producto:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + error.message\n      };\n    }\n  }\n\n  // ===== COMPRAS =====\n  async getCompras(filters = {}) {\n    try {\n      const params = new URLSearchParams({\n        section: 'compras',\n        page: filters.page || 1,\n        limit: filters.limit || 20\n      });\n      if (filters.search) params.append('search', filters.search);\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: headers\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          compras: data.compras,\n          pagination: data.pagination\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al obtener compras'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener compras:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + error.message\n      };\n    }\n  }\n  async createCompra(compraData) {\n    try {\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?section=compras`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(compraData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          compra: data.compra\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al crear compra'\n        };\n      }\n    } catch (error) {\n      console.error('Error al crear compra:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + error.message\n      };\n    }\n  }\n\n  // ===== CONSUMO =====\n  async getConsumos(filters = {}) {\n    try {\n      const params = new URLSearchParams({\n        section: 'consumo',\n        page: filters.page || 1,\n        limit: filters.limit || 20\n      });\n      if (filters.search) params.append('search', filters.search);\n      if (filters.almacen) params.append('almacen', filters.almacen);\n      if (filters.mes) params.append('mes', filters.mes);\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: headers\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          consumos: data.consumos,\n          pagination: data.pagination\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al obtener consumos'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener consumos:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + error.message\n      };\n    }\n  }\n  async createConsumo(consumoData) {\n    try {\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?section=consumo`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(consumoData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        return {\n          success: true,\n          consumo: data.consumo\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error al crear consumo'\n        };\n      }\n    } catch (error) {\n      console.error('Error al crear consumo:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + error.message\n      };\n    }\n  }\n}\nconst inventarioService = new InventarioService();\nexport default inventarioService;","map":{"version":3,"names":["API_URL","InventarioService","constructor","authService","setAuthService","getHeaders","includeAuth","headers","token","getToken","getProductos","filters","params","URLSearchParams","section","page","limit","search","append","tipo","categoria","almacen","alerta_stock","response","fetch","toString","method","data","json","ok","success","productos","pagination","error","console","message","createProducto","productoData","body","JSON","stringify","producto","getCompras","compras","createCompra","compraData","compra","getConsumos","mes","consumos","createConsumo","consumoData","consumo","inventarioService"],"sources":["C:/Users/Hunter123_04/Desktop/PERSONAL/GIT/PROYECTOS GIT/SISTEMA_DOCTOR_CONSULTORIO/src/services/inventarioService.js"],"sourcesContent":["// Servicio para gestión de inventario (productos, compras, consumo)\nconst API_URL = 'https://inventario-1090334808863.us-central1.run.app'; // Reemplazar con la URL real de tu Cloud Function de Inventario\n\nclass InventarioService {\n  constructor() {\n    this.authService = null;\n  }\n\n  setAuthService(authService) {\n    this.authService = authService;\n  }\n\n  getHeaders(includeAuth = true) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n\n    if (includeAuth && this.authService) {\n      const token = this.authService.getToken();\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n    }\n    return headers;\n  }\n\n  // ===== PRODUCTOS =====\n  async getProductos(filters = {}) {\n    try {\n      const params = new URLSearchParams({\n        section: 'productos',\n        page: filters.page || 1,\n        limit: filters.limit || 20\n      });\n\n      if (filters.search) params.append('search', filters.search);\n      if (filters.tipo) params.append('tipo', filters.tipo);\n      if (filters.categoria) params.append('categoria', filters.categoria);\n      if (filters.almacen) params.append('almacen', filters.almacen);\n      if (filters.alerta_stock) params.append('alerta_stock', filters.alerta_stock);\n\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: headers\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, productos: data.productos, pagination: data.pagination };\n      } else {\n        return { success: false, error: data.error || 'Error al obtener productos' };\n      }\n    } catch (error) {\n      console.error('Error al obtener productos:', error);\n      return { success: false, error: 'Error de conexión con el servidor: ' + error.message };\n    }\n  }\n\n  async createProducto(productoData) {\n    try {\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?section=productos`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(productoData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, producto: data.producto };\n      } else {\n        return { success: false, error: data.error || 'Error al crear producto' };\n      }\n    } catch (error) {\n      console.error('Error al crear producto:', error);\n      return { success: false, error: 'Error de conexión con el servidor: ' + error.message };\n    }\n  }\n\n  // ===== COMPRAS =====\n  async getCompras(filters = {}) {\n    try {\n      const params = new URLSearchParams({\n        section: 'compras',\n        page: filters.page || 1,\n        limit: filters.limit || 20\n      });\n\n      if (filters.search) params.append('search', filters.search);\n\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: headers\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, compras: data.compras, pagination: data.pagination };\n      } else {\n        return { success: false, error: data.error || 'Error al obtener compras' };\n      }\n    } catch (error) {\n      console.error('Error al obtener compras:', error);\n      return { success: false, error: 'Error de conexión con el servidor: ' + error.message };\n    }\n  }\n\n  async createCompra(compraData) {\n    try {\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?section=compras`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(compraData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, compra: data.compra };\n      } else {\n        return { success: false, error: data.error || 'Error al crear compra' };\n      }\n    } catch (error) {\n      console.error('Error al crear compra:', error);\n      return { success: false, error: 'Error de conexión con el servidor: ' + error.message };\n    }\n  }\n\n  // ===== CONSUMO =====\n  async getConsumos(filters = {}) {\n    try {\n      const params = new URLSearchParams({\n        section: 'consumo',\n        page: filters.page || 1,\n        limit: filters.limit || 20\n      });\n\n      if (filters.search) params.append('search', filters.search);\n      if (filters.almacen) params.append('almacen', filters.almacen);\n      if (filters.mes) params.append('mes', filters.mes);\n\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: headers\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, consumos: data.consumos, pagination: data.pagination };\n      } else {\n        return { success: false, error: data.error || 'Error al obtener consumos' };\n      }\n    } catch (error) {\n      console.error('Error al obtener consumos:', error);\n      return { success: false, error: 'Error de conexión con el servidor: ' + error.message };\n    }\n  }\n\n  async createConsumo(consumoData) {\n    try {\n      const headers = this.getHeaders();\n      const response = await fetch(`${API_URL}?section=consumo`, {\n        method: 'POST',\n        headers: headers,\n        body: JSON.stringify(consumoData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        return { success: true, consumo: data.consumo };\n      } else {\n        return { success: false, error: data.error || 'Error al crear consumo' };\n      }\n    } catch (error) {\n      console.error('Error al crear consumo:', error);\n      return { success: false, error: 'Error de conexión con el servidor: ' + error.message };\n    }\n  }\n}\n\nconst inventarioService = new InventarioService();\nexport default inventarioService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}