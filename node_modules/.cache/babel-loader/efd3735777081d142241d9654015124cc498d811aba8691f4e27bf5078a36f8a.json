{"ast":null,"code":"const API_URL = 'https://caja-1090334808863.us-central1.run.app';\nclass CajaService {\n  constructor() {\n    this.authService = null;\n  }\n  setAuthService(authService) {\n    this.authService = authService;\n  }\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.authService) {\n      var _this$authService$get, _this$authService;\n      const token = (_this$authService$get = (_this$authService = this.authService).getToken) === null || _this$authService$get === void 0 ? void 0 : _this$authService$get.call(_this$authService);\n      if (token) headers['Authorization'] = `Bearer ${token}`;\n    }\n    return headers;\n  }\n  async list({\n    date,\n    type = 'all'\n  } = {}) {\n    const params = new URLSearchParams({\n      action: 'list'\n    });\n    if (date) params.append('date', date);\n    if (type && type !== 'all') params.append('type', type);\n    try {\n      const res = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      const data = await res.json();\n      if (res.ok && data.success) return {\n        success: true,\n        transactions: data.transactions\n      };\n      return {\n        success: false,\n        error: data.error || 'Error al listar transacciones'\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + e.message\n      };\n    }\n  }\n  async summary({\n    date\n  } = {}) {\n    const params = new URLSearchParams({\n      action: 'summary'\n    });\n    if (date) params.append('date', date);\n    try {\n      const res = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      const data = await res.json();\n      if (res.ok && data.success) return {\n        success: true,\n        summary: data.summary\n      };\n      return {\n        success: false,\n        error: data.error || 'Error al obtener resumen'\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + e.message\n      };\n    }\n  }\n  async create({\n    tipo_transaccion,\n    concepto,\n    monto,\n    medio_pago,\n    referencia_pago,\n    comentario,\n    id_doctor,\n    id_paciente,\n    fecha_transaccion,\n    estado\n  }) {\n    const params = new URLSearchParams({\n      action: 'create'\n    });\n    try {\n      const res = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          tipo_transaccion,\n          concepto,\n          monto,\n          medio_pago,\n          referencia_pago,\n          comentario,\n          id_doctor,\n          id_paciente,\n          fecha_transaccion,\n          estado\n        })\n      });\n      const data = await res.json();\n      if (res.ok && data.success) return {\n        success: true,\n        transaction_id: data.transaction_id\n      };\n      return {\n        success: false,\n        error: data.error || 'Error al crear transacción'\n      };\n    } catch (e) {\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor: ' + e.message\n      };\n    }\n  }\n}\nconst cajaService = new CajaService();\nexport default cajaService;","map":{"version":3,"names":["API_URL","CajaService","constructor","authService","setAuthService","getHeaders","headers","_this$authService$get","_this$authService","token","getToken","call","list","date","type","params","URLSearchParams","action","append","res","fetch","toString","method","data","json","ok","success","transactions","error","e","message","summary","create","tipo_transaccion","concepto","monto","medio_pago","referencia_pago","comentario","id_doctor","id_paciente","fecha_transaccion","estado","body","JSON","stringify","transaction_id","cajaService"],"sources":["C:/Users/Hunter123_04/Desktop/PERSONAL/GIT/PROYECTOS GIT/SISTEMA_DOCTOR_CONSULTORIO/src/services/cajaService.js"],"sourcesContent":["const API_URL = 'https://caja-1090334808863.us-central1.run.app';\n\nclass CajaService {\n  constructor() {\n    this.authService = null;\n  }\n\n  setAuthService(authService) {\n    this.authService = authService;\n  }\n\n  getHeaders() {\n    const headers = { 'Content-Type': 'application/json' };\n    if (this.authService) {\n      const token = this.authService.getToken?.();\n      if (token) headers['Authorization'] = `Bearer ${token}`;\n    }\n    return headers;\n  }\n\n  async list({ date, type = 'all' } = {}) {\n    const params = new URLSearchParams({ action: 'list' });\n    if (date) params.append('date', date);\n    if (type && type !== 'all') params.append('type', type);\n\n    try {\n      const res = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      const data = await res.json();\n      if (res.ok && data.success) return { success: true, transactions: data.transactions };\n      return { success: false, error: data.error || 'Error al listar transacciones' };\n    } catch (e) {\n      return { success: false, error: 'Error de conexión con el servidor: ' + e.message };\n    }\n  }\n\n  async summary({ date } = {}) {\n    const params = new URLSearchParams({ action: 'summary' });\n    if (date) params.append('date', date);\n\n    try {\n      const res = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      const data = await res.json();\n      if (res.ok && data.success) return { success: true, summary: data.summary };\n      return { success: false, error: data.error || 'Error al obtener resumen' };\n    } catch (e) {\n      return { success: false, error: 'Error de conexión con el servidor: ' + e.message };\n    }\n  }\n\n  async create({ tipo_transaccion, concepto, monto, medio_pago, referencia_pago, comentario, id_doctor, id_paciente, fecha_transaccion, estado }) {\n    const params = new URLSearchParams({ action: 'create' });\n\n    try {\n      const res = await fetch(`${API_URL}?${params.toString()}`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({ tipo_transaccion, concepto, monto, medio_pago, referencia_pago, comentario, id_doctor, id_paciente, fecha_transaccion, estado })\n      });\n      const data = await res.json();\n      if (res.ok && data.success) return { success: true, transaction_id: data.transaction_id };\n      return { success: false, error: data.error || 'Error al crear transacción' };\n    } catch (e) {\n      return { success: false, error: 'Error de conexión con el servidor: ' + e.message };\n    }\n  }\n}\n\nconst cajaService = new CajaService();\nexport default cajaService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}