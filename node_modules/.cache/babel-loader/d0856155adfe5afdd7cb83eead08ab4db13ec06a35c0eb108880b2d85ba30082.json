{"ast":null,"code":"// Servicio para manejar la autenticación y perfil de usuario\nconst API_URL = 'https://usuarios-1090334808863.us-central1.run.app';\nclass AuthService {\n  constructor() {\n    this.token = localStorage.getItem('authToken');\n    this.user = JSON.parse(localStorage.getItem('userData') || 'null');\n  }\n\n  // Obtener el token actual\n  getToken() {\n    return this.token || localStorage.getItem('authToken');\n  }\n\n  // Headers base para las peticiones\n  getHeaders(includeAuth = false) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (includeAuth && this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n\n  // Función para login\n  async login(username, password) {\n    try {\n      const response = await fetch(`${API_URL}?action=login`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          username: username,\n          password: password\n        })\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        // Guardar token y datos del usuario\n        this.token = data.token;\n        this.user = data.user;\n        localStorage.setItem('authToken', this.token);\n        localStorage.setItem('userData', JSON.stringify(this.user));\n        return {\n          success: true,\n          user: this.user,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error en el login'\n        };\n      }\n    } catch (error) {\n      console.error('Error en login:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Función para obtener perfil\n  async getProfile() {\n    try {\n      if (!this.token) {\n        return {\n          success: false,\n          error: 'No hay token de autenticación'\n        };\n      }\n      const response = await fetch(`${API_URL}?action=profile`, {\n        method: 'GET',\n        headers: this.getHeaders(true)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        this.user = data.user;\n        localStorage.setItem('userData', JSON.stringify(this.user));\n        return {\n          success: true,\n          user: this.user\n        };\n      } else {\n        if (response.status === 401) {\n          this.logout();\n        }\n        return {\n          success: false,\n          error: data.error || 'Error al obtener perfil'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener perfil:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Función para actualizar perfil\n  async updateProfile(profileData) {\n    try {\n      if (!this.token) {\n        return {\n          success: false,\n          error: 'No hay token de autenticación'\n        };\n      }\n      const response = await fetch(`${API_URL}?action=profile`, {\n        method: 'PUT',\n        headers: this.getHeaders(true),\n        body: JSON.stringify(profileData)\n      });\n      const data = await response.json();\n      if (response.ok && data.success) {\n        // Actualizar datos del usuario local\n        await this.getProfile();\n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        if (response.status === 401) {\n          this.logout();\n        }\n        return {\n          success: false,\n          error: data.error || 'Error al actualizar perfil'\n        };\n      }\n    } catch (error) {\n      console.error('Error al actualizar perfil:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Función para logout\n  logout() {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n  }\n\n  // Verificar si el usuario está autenticado\n  isAuthenticated() {\n    return this.token !== null && this.user !== null;\n  }\n\n  // Obtener usuario actual\n  getCurrentUser() {\n    return this.user;\n  }\n\n  // Verificar si el token ha expirado (básico)\n  isTokenExpired() {\n    if (!this.token) return true;\n    try {\n      const payload = JSON.parse(atob(this.token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp < currentTime;\n    } catch (error) {\n      return true;\n    }\n  }\n\n  // Verificar rol del usuario\n  hasRole(role) {\n    return this.user && this.user.role === role;\n  }\n\n  // Verificar si es doctor\n  isDoctor() {\n    return this.user && this.user.is_doctor;\n  }\n}\n\n// Exportar una instancia única del servicio\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["API_URL","AuthService","constructor","token","localStorage","getItem","user","JSON","parse","getToken","getHeaders","includeAuth","headers","login","username","password","response","fetch","method","body","stringify","data","json","ok","success","setItem","message","error","console","getProfile","status","logout","updateProfile","profileData","removeItem","isAuthenticated","getCurrentUser","isTokenExpired","payload","atob","split","currentTime","Date","now","exp","hasRole","role","isDoctor","is_doctor","authService"],"sources":["C:/Users/Hunter123_04/Desktop/PERSONAL/GIT/PROYECTOS GIT/SISTEMA_DOCTOR_CONSULTORIO/src/services/authService.js"],"sourcesContent":["// Servicio para manejar la autenticación y perfil de usuario\nconst API_URL = 'https://usuarios-1090334808863.us-central1.run.app';\n\nclass AuthService {\n  constructor() {\n    this.token = localStorage.getItem('authToken');\n    this.user = JSON.parse(localStorage.getItem('userData') || 'null');\n  }\n\n  // Obtener el token actual\n  getToken() {\n    return this.token || localStorage.getItem('authToken');\n  }\n\n  // Headers base para las peticiones\n  getHeaders(includeAuth = false) {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n\n    if (includeAuth && this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n\n    return headers;\n  }\n\n  // Función para login\n  async login(username, password) {\n    try {\n      const response = await fetch(`${API_URL}?action=login`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          username: username,\n          password: password\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        // Guardar token y datos del usuario\n        this.token = data.token;\n        this.user = data.user;\n        \n        localStorage.setItem('authToken', this.token);\n        localStorage.setItem('userData', JSON.stringify(this.user));\n\n        return {\n          success: true,\n          user: this.user,\n          message: data.message\n        };\n      } else {\n        return {\n          success: false,\n          error: data.error || 'Error en el login'\n        };\n      }\n    } catch (error) {\n      console.error('Error en login:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Función para obtener perfil\n  async getProfile() {\n    try {\n      if (!this.token) {\n        return {\n          success: false,\n          error: 'No hay token de autenticación'\n        };\n      }\n\n      const response = await fetch(`${API_URL}?action=profile`, {\n        method: 'GET',\n        headers: this.getHeaders(true)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        this.user = data.user;\n        localStorage.setItem('userData', JSON.stringify(this.user));\n        \n        return {\n          success: true,\n          user: this.user\n        };\n      } else {\n        if (response.status === 401) {\n          this.logout();\n        }\n        return {\n          success: false,\n          error: data.error || 'Error al obtener perfil'\n        };\n      }\n    } catch (error) {\n      console.error('Error al obtener perfil:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Función para actualizar perfil\n  async updateProfile(profileData) {\n    try {\n      if (!this.token) {\n        return {\n          success: false,\n          error: 'No hay token de autenticación'\n        };\n      }\n\n      const response = await fetch(`${API_URL}?action=profile`, {\n        method: 'PUT',\n        headers: this.getHeaders(true),\n        body: JSON.stringify(profileData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        // Actualizar datos del usuario local\n        await this.getProfile();\n        \n        return {\n          success: true,\n          message: data.message\n        };\n      } else {\n        if (response.status === 401) {\n          this.logout();\n        }\n        return {\n          success: false,\n          error: data.error || 'Error al actualizar perfil'\n        };\n      }\n    } catch (error) {\n      console.error('Error al actualizar perfil:', error);\n      return {\n        success: false,\n        error: 'Error de conexión con el servidor'\n      };\n    }\n  }\n\n  // Función para logout\n  logout() {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('userData');\n  }\n\n  // Verificar si el usuario está autenticado\n  isAuthenticated() {\n    return this.token !== null && this.user !== null;\n  }\n\n  // Obtener usuario actual\n  getCurrentUser() {\n    return this.user;\n  }\n\n  // Verificar si el token ha expirado (básico)\n  isTokenExpired() {\n    if (!this.token) return true;\n    \n    try {\n      const payload = JSON.parse(atob(this.token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      return payload.exp < currentTime;\n    } catch (error) {\n      return true;\n    }\n  }\n\n  // Verificar rol del usuario\n  hasRole(role) {\n    return this.user && this.user.role === role;\n  }\n\n  // Verificar si es doctor\n  isDoctor() {\n    return this.user && this.user.is_doctor;\n  }\n}\n\n// Exportar una instancia única del servicio\nconst authService = new AuthService();\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}