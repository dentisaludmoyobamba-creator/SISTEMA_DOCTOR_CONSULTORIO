{"ast":null,"code":"import{apiRequest}from'./apiClient';import{API_CONFIG}from'../config/api';export const appointmentsService={// Obtener todas las citas\ngetAppointments:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await apiRequest.get(API_CONFIG.ENDPOINTS.APPOINTMENTS,params);return response;}catch(error){throw error;}},// Obtener una cita por ID\ngetAppointmentById:async id=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/\").concat(id));return response;}catch(error){throw error;}},// Crear una nueva cita\ncreateAppointment:async appointmentData=>{try{const response=await apiRequest.post(API_CONFIG.ENDPOINTS.APPOINTMENTS,appointmentData);return response;}catch(error){throw error;}},// Actualizar una cita\nupdateAppointment:async(id,appointmentData)=>{try{const response=await apiRequest.put(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/\").concat(id),appointmentData);return response;}catch(error){throw error;}},// Eliminar una cita\ndeleteAppointment:async id=>{try{const response=await apiRequest.delete(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/\").concat(id));return response;}catch(error){throw error;}},// Obtener citas por fecha\ngetAppointmentsByDate:async date=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/date/\").concat(date));return response;}catch(error){throw error;}},// Obtener citas por doctor\ngetAppointmentsByDoctor:async function(doctorId){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/doctor/\").concat(doctorId),params);return response;}catch(error){throw error;}},// Obtener citas por paciente\ngetAppointmentsByPatient:async patientId=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/patient/\").concat(patientId));return response;}catch(error){throw error;}},// Cambiar estado de una cita\nupdateAppointmentStatus:async(id,status)=>{try{const response=await apiRequest.patch(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/\").concat(id,\"/status\"),{status:status});return response;}catch(error){throw error;}},// Obtener horarios disponibles\ngetAvailableSlots:async(doctorId,date)=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.APPOINTMENTS,\"/available-slots\"),{doctor_id:doctorId,date:date});return response;}catch(error){throw error;}}};","map":{"version":3,"names":["apiRequest","API_CONFIG","appointmentsService","getAppointments","params","arguments","length","undefined","response","get","ENDPOINTS","APPOINTMENTS","error","getAppointmentById","id","concat","createAppointment","appointmentData","post","updateAppointment","put","deleteAppointment","delete","getAppointmentsByDate","date","getAppointmentsByDoctor","doctorId","getAppointmentsByPatient","patientId","updateAppointmentStatus","status","patch","getAvailableSlots","doctor_id"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/appointmentsService.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\nexport const appointmentsService = {\r\n  // Obtener todas las citas\r\n  getAppointments: async (params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.APPOINTMENTS, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener una cita por ID\r\n  getAppointmentById: async (id) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear una nueva cita\r\n  createAppointment: async (appointmentData) => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.APPOINTMENTS, appointmentData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar una cita\r\n  updateAppointment: async (id, appointmentData) => {\r\n    try {\r\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`, appointmentData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar una cita\r\n  deleteAppointment: async (id) => {\r\n    try {\r\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener citas por fecha\r\n  getAppointmentsByDate: async (date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/date/${date}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener citas por doctor\r\n  getAppointmentsByDoctor: async (doctorId, params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/doctor/${doctorId}`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener citas por paciente\r\n  getAppointmentsByPatient: async (patientId) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/patient/${patientId}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cambiar estado de una cita\r\n  updateAppointmentStatus: async (id, status) => {\r\n    try {\r\n      const response = await apiRequest.patch(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}/status`, {\r\n        status: status\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener horarios disponibles\r\n  getAvailableSlots: async (doctorId, date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/available-slots`, {\r\n        doctor_id: doctorId,\r\n        date: date\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}