{"ast":null,"code":"import { apiRequest } from './apiClient';\nimport { API_CONFIG } from '../config/api';\nexport const doctorsService = {\n  // Obtener todos los doctores\n  getDoctors: async () => {\n    try {\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.DOCTORS);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener un doctor por ID\n  getDoctorById: async id => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Crear un nuevo doctor\n  createDoctor: async doctorData => {\n    try {\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.DOCTORS, doctorData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Actualizar un doctor\n  updateDoctor: async (id, doctorData) => {\n    try {\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`, doctorData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Eliminar un doctor\n  deleteDoctor: async id => {\n    try {\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener horarios de un doctor\n  getDoctorSchedule: async (id, date) => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}/schedule`, {\n        date: date\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","API_CONFIG","doctorsService","getDoctors","response","get","ENDPOINTS","DOCTORS","error","getDoctorById","id","createDoctor","doctorData","post","updateDoctor","put","deleteDoctor","delete","getDoctorSchedule","date"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/doctorsService.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\nexport const doctorsService = {\r\n  // Obtener todos los doctores\r\n  getDoctors: async () => {\r\n    try {\r\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.DOCTORS);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener un doctor por ID\r\n  getDoctorById: async (id) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear un nuevo doctor\r\n  createDoctor: async (doctorData) => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.DOCTORS, doctorData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar un doctor\r\n  updateDoctor: async (id, doctorData) => {\r\n    try {\r\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`, doctorData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar un doctor\r\n  deleteDoctor: async (id) => {\r\n    try {\r\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener horarios de un doctor\r\n  getDoctorSchedule: async (id, date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}/schedule`, {\r\n        date: date\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,UAAU,QAAQ,eAAe;AAE1C,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,UAAU,CAACK,GAAG,CAACJ,UAAU,CAACK,SAAS,CAACC,OAAO,CAAC;MACnE,OAAOH,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAC,aAAa,EAAE,MAAOC,EAAE,IAAK;IAC3B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,UAAU,CAACK,GAAG,CAAC,GAAGJ,UAAU,CAACK,SAAS,CAACC,OAAO,IAAIG,EAAE,EAAE,CAAC;MAC9E,OAAON,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAG,YAAY,EAAE,MAAOC,UAAU,IAAK;IAClC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,UAAU,CAACa,IAAI,CAACZ,UAAU,CAACK,SAAS,CAACC,OAAO,EAAEK,UAAU,CAAC;MAChF,OAAOR,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAM,YAAY,EAAE,MAAAA,CAAOJ,EAAE,EAAEE,UAAU,KAAK;IACtC,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMJ,UAAU,CAACe,GAAG,CAAC,GAAGd,UAAU,CAACK,SAAS,CAACC,OAAO,IAAIG,EAAE,EAAE,EAAEE,UAAU,CAAC;MAC1F,OAAOR,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAQ,YAAY,EAAE,MAAON,EAAE,IAAK;IAC1B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMJ,UAAU,CAACiB,MAAM,CAAC,GAAGhB,UAAU,CAACK,SAAS,CAACC,OAAO,IAAIG,EAAE,EAAE,CAAC;MACjF,OAAON,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAU,iBAAiB,EAAE,MAAAA,CAAOR,EAAE,EAAES,IAAI,KAAK;IACrC,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMJ,UAAU,CAACK,GAAG,CAAC,GAAGJ,UAAU,CAACK,SAAS,CAACC,OAAO,IAAIG,EAAE,WAAW,EAAE;QACtFS,IAAI,EAAEA;MACR,CAAC,CAAC;MACF,OAAOf,QAAQ;IACjB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}