{"ast":null,"code":"import{apiRequest}from'./apiClient';import{API_CONFIG}from'../config/api';export const transactionsService={// Obtener todas las transacciones\ngetTransactions:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await apiRequest.get(API_CONFIG.ENDPOINTS.TRANSACTIONS,params);return response;}catch(error){throw error;}},// Obtener una transacción por ID\ngetTransactionById:async id=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/\").concat(id));return response;}catch(error){throw error;}},// Crear una nueva transacción\ncreateTransaction:async transactionData=>{try{const response=await apiRequest.post(API_CONFIG.ENDPOINTS.TRANSACTIONS,transactionData);return response;}catch(error){throw error;}},// Actualizar una transacción\nupdateTransaction:async(id,transactionData)=>{try{const response=await apiRequest.put(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/\").concat(id),transactionData);return response;}catch(error){throw error;}},// Eliminar una transacción\ndeleteTransaction:async id=>{try{const response=await apiRequest.delete(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/\").concat(id));return response;}catch(error){throw error;}},// Obtener resumen financiero\ngetFinancialSummary:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/summary\"),params);return response;}catch(error){throw error;}},// Obtener transacciones por fecha\ngetTransactionsByDate:async date=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/date/\").concat(date));return response;}catch(error){throw error;}},// Obtener transacciones por rango de fechas\ngetTransactionsByDateRange:async(startDate,endDate)=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/date-range\"),{start_date:startDate,end_date:endDate});return response;}catch(error){throw error;}},// Obtener transacciones por doctor\ngetTransactionsByDoctor:async function(doctorId){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/doctor/\").concat(doctorId),params);return response;}catch(error){throw error;}},// Obtener transacciones por tipo\ngetTransactionsByType:async function(type){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.TRANSACTIONS,\"/type/\").concat(type),params);return response;}catch(error){throw error;}}};","map":{"version":3,"names":["apiRequest","API_CONFIG","transactionsService","getTransactions","params","arguments","length","undefined","response","get","ENDPOINTS","TRANSACTIONS","error","getTransactionById","id","concat","createTransaction","transactionData","post","updateTransaction","put","deleteTransaction","delete","getFinancialSummary","getTransactionsByDate","date","getTransactionsByDateRange","startDate","endDate","start_date","end_date","getTransactionsByDoctor","doctorId","getTransactionsByType","type"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/transactionsService.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\nexport const transactionsService = {\r\n  // Obtener todas las transacciones\r\n  getTransactions: async (params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.TRANSACTIONS, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener una transacción por ID\r\n  getTransactionById: async (id) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear una nueva transacción\r\n  createTransaction: async (transactionData) => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.TRANSACTIONS, transactionData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar una transacción\r\n  updateTransaction: async (id, transactionData) => {\r\n    try {\r\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`, transactionData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar una transacción\r\n  deleteTransaction: async (id) => {\r\n    try {\r\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener resumen financiero\r\n  getFinancialSummary: async (params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/summary`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por fecha\r\n  getTransactionsByDate: async (date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/date/${date}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por rango de fechas\r\n  getTransactionsByDateRange: async (startDate, endDate) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/date-range`, {\r\n        start_date: startDate,\r\n        end_date: endDate\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por doctor\r\n  getTransactionsByDoctor: async (doctorId, params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/doctor/${doctorId}`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por tipo\r\n  getTransactionsByType: async (type, params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/type/${type}`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}