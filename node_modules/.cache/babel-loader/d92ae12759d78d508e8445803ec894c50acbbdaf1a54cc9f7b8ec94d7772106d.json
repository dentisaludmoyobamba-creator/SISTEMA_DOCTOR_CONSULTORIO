{"ast":null,"code":"import { apiRequest } from './apiClient';\nimport { API_CONFIG } from '../config/api';\nexport const appointmentsService = {\n  // Obtener todas las citas\n  getAppointments: async (params = {}) => {\n    try {\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.APPOINTMENTS, params);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener una cita por ID\n  getAppointmentById: async id => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Crear una nueva cita\n  createAppointment: async appointmentData => {\n    try {\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.APPOINTMENTS, appointmentData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Actualizar una cita\n  updateAppointment: async (id, appointmentData) => {\n    try {\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`, appointmentData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Eliminar una cita\n  deleteAppointment: async id => {\n    try {\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener citas por fecha\n  getAppointmentsByDate: async date => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/date/${date}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener citas por doctor\n  getAppointmentsByDoctor: async (doctorId, params = {}) => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/doctor/${doctorId}`, params);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener citas por paciente\n  getAppointmentsByPatient: async patientId => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/patient/${patientId}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Cambiar estado de una cita\n  updateAppointmentStatus: async (id, status) => {\n    try {\n      const response = await apiRequest.patch(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}/status`, {\n        status: status\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener horarios disponibles\n  getAvailableSlots: async (doctorId, date) => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/available-slots`, {\n        doctor_id: doctorId,\n        date: date\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","API_CONFIG","appointmentsService","getAppointments","params","response","get","ENDPOINTS","APPOINTMENTS","error","getAppointmentById","id","createAppointment","appointmentData","post","updateAppointment","put","deleteAppointment","delete","getAppointmentsByDate","date","getAppointmentsByDoctor","doctorId","getAppointmentsByPatient","patientId","updateAppointmentStatus","status","patch","getAvailableSlots","doctor_id"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/appointmentsService.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\nexport const appointmentsService = {\r\n  // Obtener todas las citas\r\n  getAppointments: async (params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.APPOINTMENTS, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener una cita por ID\r\n  getAppointmentById: async (id) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear una nueva cita\r\n  createAppointment: async (appointmentData) => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.APPOINTMENTS, appointmentData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar una cita\r\n  updateAppointment: async (id, appointmentData) => {\r\n    try {\r\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`, appointmentData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar una cita\r\n  deleteAppointment: async (id) => {\r\n    try {\r\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener citas por fecha\r\n  getAppointmentsByDate: async (date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/date/${date}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener citas por doctor\r\n  getAppointmentsByDoctor: async (doctorId, params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/doctor/${doctorId}`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener citas por paciente\r\n  getAppointmentsByPatient: async (patientId) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/patient/${patientId}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cambiar estado de una cita\r\n  updateAppointmentStatus: async (id, status) => {\r\n    try {\r\n      const response = await apiRequest.patch(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/${id}/status`, {\r\n        status: status\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener horarios disponibles\r\n  getAvailableSlots: async (doctorId, date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.APPOINTMENTS}/available-slots`, {\r\n        doctor_id: doctorId,\r\n        date: date\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}