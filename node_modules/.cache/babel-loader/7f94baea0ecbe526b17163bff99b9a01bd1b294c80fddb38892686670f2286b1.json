{"ast":null,"code":"import { apiRequest } from './apiClient';\nimport { API_CONFIG } from '../config/api';\nexport const transactionsService = {\n  // Obtener todas las transacciones\n  getTransactions: async (params = {}) => {\n    try {\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.TRANSACTIONS, params);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener una transacción por ID\n  getTransactionById: async id => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Crear una nueva transacción\n  createTransaction: async transactionData => {\n    try {\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.TRANSACTIONS, transactionData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Actualizar una transacción\n  updateTransaction: async (id, transactionData) => {\n    try {\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`, transactionData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Eliminar una transacción\n  deleteTransaction: async id => {\n    try {\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener resumen financiero\n  getFinancialSummary: async (params = {}) => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/summary`, params);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener transacciones por fecha\n  getTransactionsByDate: async date => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/date/${date}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener transacciones por rango de fechas\n  getTransactionsByDateRange: async (startDate, endDate) => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/date-range`, {\n        start_date: startDate,\n        end_date: endDate\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener transacciones por doctor\n  getTransactionsByDoctor: async (doctorId, params = {}) => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/doctor/${doctorId}`, params);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Obtener transacciones por tipo\n  getTransactionsByType: async (type, params = {}) => {\n    try {\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/type/${type}`, params);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["apiRequest","API_CONFIG","transactionsService","getTransactions","params","response","get","ENDPOINTS","TRANSACTIONS","error","getTransactionById","id","createTransaction","transactionData","post","updateTransaction","put","deleteTransaction","delete","getFinancialSummary","getTransactionsByDate","date","getTransactionsByDateRange","startDate","endDate","start_date","end_date","getTransactionsByDoctor","doctorId","getTransactionsByType","type"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/transactionsService.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\nexport const transactionsService = {\r\n  // Obtener todas las transacciones\r\n  getTransactions: async (params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.TRANSACTIONS, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener una transacción por ID\r\n  getTransactionById: async (id) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear una nueva transacción\r\n  createTransaction: async (transactionData) => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.TRANSACTIONS, transactionData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar una transacción\r\n  updateTransaction: async (id, transactionData) => {\r\n    try {\r\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`, transactionData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar una transacción\r\n  deleteTransaction: async (id) => {\r\n    try {\r\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener resumen financiero\r\n  getFinancialSummary: async (params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/summary`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por fecha\r\n  getTransactionsByDate: async (date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/date/${date}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por rango de fechas\r\n  getTransactionsByDateRange: async (startDate, endDate) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/date-range`, {\r\n        start_date: startDate,\r\n        end_date: endDate\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por doctor\r\n  getTransactionsByDoctor: async (doctorId, params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/doctor/${doctorId}`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener transacciones por tipo\r\n  getTransactionsByType: async (type, params = {}) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.TRANSACTIONS}/type/${type}`, params);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}