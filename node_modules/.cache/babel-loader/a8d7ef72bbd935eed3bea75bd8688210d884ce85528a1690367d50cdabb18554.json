{"ast":null,"code":"import{apiRequest}from'./apiClient';import{API_CONFIG}from'../config/api';export const doctorsService={// Obtener todos los doctores\ngetDoctors:async()=>{try{const response=await apiRequest.get(API_CONFIG.ENDPOINTS.DOCTORS);return response;}catch(error){throw error;}},// Obtener un doctor por ID\ngetDoctorById:async id=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.DOCTORS,\"/\").concat(id));return response;}catch(error){throw error;}},// Crear un nuevo doctor\ncreateDoctor:async doctorData=>{try{const response=await apiRequest.post(API_CONFIG.ENDPOINTS.DOCTORS,doctorData);return response;}catch(error){throw error;}},// Actualizar un doctor\nupdateDoctor:async(id,doctorData)=>{try{const response=await apiRequest.put(\"\".concat(API_CONFIG.ENDPOINTS.DOCTORS,\"/\").concat(id),doctorData);return response;}catch(error){throw error;}},// Eliminar un doctor\ndeleteDoctor:async id=>{try{const response=await apiRequest.delete(\"\".concat(API_CONFIG.ENDPOINTS.DOCTORS,\"/\").concat(id));return response;}catch(error){throw error;}},// Obtener horarios de un doctor\ngetDoctorSchedule:async(id,date)=>{try{const response=await apiRequest.get(\"\".concat(API_CONFIG.ENDPOINTS.DOCTORS,\"/\").concat(id,\"/schedule\"),{date:date});return response;}catch(error){throw error;}}};","map":{"version":3,"names":["apiRequest","API_CONFIG","doctorsService","getDoctors","response","get","ENDPOINTS","DOCTORS","error","getDoctorById","id","concat","createDoctor","doctorData","post","updateDoctor","put","deleteDoctor","delete","getDoctorSchedule","date"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/doctorsService.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\nexport const doctorsService = {\r\n  // Obtener todos los doctores\r\n  getDoctors: async () => {\r\n    try {\r\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.DOCTORS);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener un doctor por ID\r\n  getDoctorById: async (id) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Crear un nuevo doctor\r\n  createDoctor: async (doctorData) => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.DOCTORS, doctorData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Actualizar un doctor\r\n  updateDoctor: async (id, doctorData) => {\r\n    try {\r\n      const response = await apiRequest.put(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`, doctorData);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Eliminar un doctor\r\n  deleteDoctor: async (id) => {\r\n    try {\r\n      const response = await apiRequest.delete(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}`);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obtener horarios de un doctor\r\n  getDoctorSchedule: async (id, date) => {\r\n    try {\r\n      const response = await apiRequest.get(`${API_CONFIG.ENDPOINTS.DOCTORS}/${id}/schedule`, {\r\n        date: date\r\n      });\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,aAAa,CACxC,OAASC,UAAU,KAAQ,eAAe,CAE1C,MAAO,MAAM,CAAAC,cAAc,CAAG,CAC5B;AACAC,UAAU,CAAE,KAAAA,CAAA,GAAY,CACtB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACK,GAAG,CAACJ,UAAU,CAACK,SAAS,CAACC,OAAO,CAAC,CACnE,MAAO,CAAAH,QAAQ,CACjB,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAC,aAAa,CAAE,KAAO,CAAAC,EAAE,EAAK,CAC3B,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACK,GAAG,IAAAM,MAAA,CAAIV,UAAU,CAACK,SAAS,CAACC,OAAO,MAAAI,MAAA,CAAID,EAAE,CAAE,CAAC,CAC9E,MAAO,CAAAN,QAAQ,CACjB,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAI,YAAY,CAAE,KAAO,CAAAC,UAAU,EAAK,CAClC,GAAI,CACF,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACc,IAAI,CAACb,UAAU,CAACK,SAAS,CAACC,OAAO,CAAEM,UAAU,CAAC,CAChF,MAAO,CAAAT,QAAQ,CACjB,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAO,YAAY,CAAE,KAAAA,CAAOL,EAAE,CAAEG,UAAU,GAAK,CACtC,GAAI,CACF,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACgB,GAAG,IAAAL,MAAA,CAAIV,UAAU,CAACK,SAAS,CAACC,OAAO,MAAAI,MAAA,CAAID,EAAE,EAAIG,UAAU,CAAC,CAC1F,MAAO,CAAAT,QAAQ,CACjB,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAS,YAAY,CAAE,KAAO,CAAAP,EAAE,EAAK,CAC1B,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACkB,MAAM,IAAAP,MAAA,CAAIV,UAAU,CAACK,SAAS,CAACC,OAAO,MAAAI,MAAA,CAAID,EAAE,CAAE,CAAC,CACjF,MAAO,CAAAN,QAAQ,CACjB,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAW,iBAAiB,CAAE,KAAAA,CAAOT,EAAE,CAAEU,IAAI,GAAK,CACrC,GAAI,CACF,KAAM,CAAAhB,QAAQ,CAAG,KAAM,CAAAJ,UAAU,CAACK,GAAG,IAAAM,MAAA,CAAIV,UAAU,CAACK,SAAS,CAACC,OAAO,MAAAI,MAAA,CAAID,EAAE,cAAa,CACtFU,IAAI,CAAEA,IACR,CAAC,CAAC,CACF,MAAO,CAAAhB,QAAQ,CACjB,CAAE,MAAOI,KAAK,CAAE,CACd,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}