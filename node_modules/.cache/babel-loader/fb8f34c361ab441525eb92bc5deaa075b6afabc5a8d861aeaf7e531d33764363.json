{"ast":null,"code":"import { apiRequest } from './apiClient';\nimport { API_CONFIG } from '../config/api';\nexport const authService = {\n  // Iniciar sesión\n  login: async credentials => {\n    try {\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.AUTH.LOGIN, credentials);\n\n      // Guardar token en localStorage\n      if (response.access_token) {\n        localStorage.setItem('auth_token', response.access_token);\n      }\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Cerrar sesión\n  logout: async () => {\n    try {\n      await apiRequest.post(API_CONFIG.ENDPOINTS.AUTH.LOGOUT);\n    } catch (error) {\n      console.error('Error al cerrar sesión:', error);\n    } finally {\n      // Limpiar datos locales independientemente del resultado\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('doctocliq_user');\n    }\n  },\n  // Obtener perfil del usuario\n  getProfile: async () => {\n    try {\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.AUTH.PROFILE);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Refrescar token\n  refreshToken: async () => {\n    try {\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.AUTH.REFRESH);\n      if (response.access_token) {\n        localStorage.setItem('auth_token', response.access_token);\n      }\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Verificar si el usuario está autenticado\n  isAuthenticated: () => {\n    const token = localStorage.getItem('auth_token');\n    return !!token;\n  },\n  // Obtener token actual\n  getToken: () => {\n    return localStorage.getItem('auth_token');\n  }\n};","map":{"version":3,"names":["apiRequest","API_CONFIG","authService","login","credentials","response","post","ENDPOINTS","AUTH","LOGIN","access_token","localStorage","setItem","error","logout","LOGOUT","console","removeItem","getProfile","get","PROFILE","refreshToken","REFRESH","isAuthenticated","token","getItem","getToken"],"sources":["C:/Users/Usuario/Documents/GitHub/SISTEMA_DOCTOR_CONSULTORIO/src/services/authService.js"],"sourcesContent":["import { apiRequest } from './apiClient';\r\nimport { API_CONFIG } from '../config/api';\r\n\r\nexport const authService = {\r\n  // Iniciar sesión\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.AUTH.LOGIN, credentials);\r\n      \r\n      // Guardar token en localStorage\r\n      if (response.access_token) {\r\n        localStorage.setItem('auth_token', response.access_token);\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Cerrar sesión\r\n  logout: async () => {\r\n    try {\r\n      await apiRequest.post(API_CONFIG.ENDPOINTS.AUTH.LOGOUT);\r\n    } catch (error) {\r\n      console.error('Error al cerrar sesión:', error);\r\n    } finally {\r\n      // Limpiar datos locales independientemente del resultado\r\n      localStorage.removeItem('auth_token');\r\n      localStorage.removeItem('doctocliq_user');\r\n    }\r\n  },\r\n\r\n  // Obtener perfil del usuario\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await apiRequest.get(API_CONFIG.ENDPOINTS.AUTH.PROFILE);\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Refrescar token\r\n  refreshToken: async () => {\r\n    try {\r\n      const response = await apiRequest.post(API_CONFIG.ENDPOINTS.AUTH.REFRESH);\r\n      \r\n      if (response.access_token) {\r\n        localStorage.setItem('auth_token', response.access_token);\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Verificar si el usuario está autenticado\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem('auth_token');\r\n    return !!token;\r\n  },\r\n\r\n  // Obtener token actual\r\n  getToken: () => {\r\n    return localStorage.getItem('auth_token');\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,UAAU,QAAQ,eAAe;AAE1C,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACL,UAAU,CAACM,SAAS,CAACC,IAAI,CAACC,KAAK,EAAEL,WAAW,CAAC;;MAEpF;MACA,IAAIC,QAAQ,CAACK,YAAY,EAAE;QACzBC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEP,QAAQ,CAACK,YAAY,CAAC;MAC3D;MAEA,OAAOL,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,IAAI;MACF,MAAMd,UAAU,CAACM,IAAI,CAACL,UAAU,CAACM,SAAS,CAACC,IAAI,CAACO,MAAM,CAAC;IACzD,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdG,OAAO,CAACH,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,SAAS;MACR;MACAF,YAAY,CAACM,UAAU,CAAC,YAAY,CAAC;MACrCN,YAAY,CAACM,UAAU,CAAC,gBAAgB,CAAC;IAC3C;EACF,CAAC;EAED;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAML,UAAU,CAACmB,GAAG,CAAClB,UAAU,CAACM,SAAS,CAACC,IAAI,CAACY,OAAO,CAAC;MACxE,OAAOf,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAQ,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAML,UAAU,CAACM,IAAI,CAACL,UAAU,CAACM,SAAS,CAACC,IAAI,CAACc,OAAO,CAAC;MAEzE,IAAIjB,QAAQ,CAACK,YAAY,EAAE;QACzBC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEP,QAAQ,CAACK,YAAY,CAAC;MAC3D;MAEA,OAAOL,QAAQ;IACjB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAU,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAMC,KAAK,GAAGb,YAAY,CAACc,OAAO,CAAC,YAAY,CAAC;IAChD,OAAO,CAAC,CAACD,KAAK;EAChB,CAAC;EAED;EACAE,QAAQ,EAAEA,CAAA,KAAM;IACd,OAAOf,YAAY,CAACc,OAAO,CAAC,YAAY,CAAC;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}